// ======= Models/Book.cs =======
namespace domaindriven.Models
{
    public class Book
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
    }
}

// ======= BusinessLayer/BookValidator.cs =======
using System;
using domaindriven.Models;

namespace domaindriven.BusinessLayer
{
    public static class BookValidator
    {
        public static void Validate(Book book)
        {
            if (string.IsNullOrWhiteSpace(book.Title))
                throw new ArgumentException("Title is required");

            if (string.IsNullOrWhiteSpace(book.Author))
                throw new ArgumentException("Author is required");
        }
    }
}

// ======= DataAccessLayer/BookRepository.cs =======
using System.Collections.Generic;
using System.Linq;
using domaindriven.Models;

namespace domaindriven.DataAccessLayer
{
    public static class BookRepository
    {
        private static List<Book> books = new List<Book>();
        private static int nextId = 1;

        public static void Add(Book book)
        {
            book.Id = nextId++;
            books.Add(book);
        }

        public static void Edit(Book book)
        {
            var existing = books.FirstOrDefault(b => b.Id == book.Id);
            if (existing != null)
            {
                existing.Title = book.Title;
                existing.Author = book.Author;
            }
        }

        public static List<Book> GetAll() => books;

        public static List<Book> Find(string keyword)
        {
            return books.Where(b =>
                b.Title.Contains(keyword, System.StringComparison.OrdinalIgnoreCase) ||
                b.Author.Contains(keyword, System.StringComparison.OrdinalIgnoreCase)).ToList();
        }

        public static void Delete(int id)
        {
            var book = books.FirstOrDefault(b => b.Id == id);
            if (book != null)
                books.Remove(book);
        }

        public static bool Exists(int id) => books.Any(b => b.Id == id);
    }
}

// ======= ConsoleApp.cs =======
using System;
using domaindriven.Models;
using domaindriven.BusinessLayer;
using domaindriven.DataAccessLayer;

namespace domaindriven
{
    public class ConsoleApp
    {
        public void Run()
        {
            while (true)
            {
                Console.WriteLine("\nMenu:");
                Console.WriteLine("1. Add Book");
                Console.WriteLine("2. Edit Book");
                Console.WriteLine("3. List Books");
                Console.WriteLine("4. Find Book");
                Console.WriteLine("5. Delete Book");
                Console.WriteLine("6. Exit");
                Console.Write("Enter choice: ");

                var choice = Console.ReadLine();
                switch (choice)
                {
                    case "1": AddBook(); break;
                    case "2": EditBook(); break;
                    case "3": ListBooks(); break;
                    case "4": FindBook(); break;
                    case "5": DeleteBook(); break;
                    case "6": return;
                    default: Console.WriteLine("Invalid choice"); break;
                }
            }
        }

        private void AddBook()
        {
            var book = ReadBookDetails();
            try
            {
                BookValidator.Validate(book);
                BookRepository.Add(book);
                Console.WriteLine("Book added.");
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        private void EditBook()
        {
            Console.Write("Enter Book Id to edit: ");
            if (int.TryParse(Console.ReadLine(), out int id) && BookRepository.Exists(id))
            {
                var book = ReadBookDetails();
                book.Id = id;
                try
                {
                    BookValidator.Validate(book);
                    BookRepository.Edit(book);
                    Console.WriteLine("Book updated.");
                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            else Console.WriteLine("Book not found.");
        }

        private void ListBooks()
        {
            var books = BookRepository.GetAll();
            foreach (var b in books)
                Console.WriteLine($"Id: {b.Id}, Title: {b.Title}, Author: {b.Author}");
        }

        private void FindBook()
        {
            Console.Write("Enter keyword to search: ");
            string keyword = Console.ReadLine();
            var results = BookRepository.Find(keyword);
            foreach (var b in results)
                Console.WriteLine($"Id: {b.Id}, Title: {b.Title}, Author: {b.Author}");
        }

        private void DeleteBook()
        {
            Console.Write("Enter Book Id to delete: ");
            if (int.TryParse(Console.ReadLine(), out int id) && BookRepository.Exists(id))
            {
                BookRepository.Delete(id);
                Console.WriteLine("Book deleted.");
            }
            else Console.WriteLine("Book not found.");
        }

        private Book ReadBookDetails()
        {
            Console.Write("Title: ");
            string title = Console.ReadLine();
            Console.Write("Author: ");
            string author = Console.ReadLine();

            return new Book { Title = title, Author = author };
        }
    }
}

// ======= Program.cs =======
namespace domaindriven
{
    class Program
    {
        static void Main()
        {
            var app = new ConsoleApp();
            app.Run();
        }
    }
}
